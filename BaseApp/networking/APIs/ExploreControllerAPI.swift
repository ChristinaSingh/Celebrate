//
// ExploreControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire

open class ExploreControllerAPI {
 
    open class func banners(completion: @escaping ((_ data: Banners?,_ error: Error?) -> Void)) {
        bannersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func bannersWithRequestBuilder() -> RequestBuilder<Banners> {
        let path = "/api/banners"
        let URLString = SwaggerClientAPI.basePath + path

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Banners>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    
    
    
    open class func categories(completion: @escaping ((_ data: Categories?,_ error: Error?) -> Void)) {
        categoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func categoriesWithRequestBuilder() -> RequestBuilder<Categories> {
        let path = "/api/products/categories"
        let URLString = SwaggerClientAPI.basePath + path

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Categories>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    
    open class func vendors(body:VendorsBody , completion: @escaping ((_ data: Vendors?,_ error: Error?) -> Void)) {
        vendorsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func vendorsWithRequestBuilder(body:VendorsBody) -> RequestBuilder<Vendors> {
        let path = "/api/vendors/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Vendors>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    open class func vendorDetails(vendorId:String , completion: @escaping ((_ data: Vendor?,_ error: Error?) -> Void)) {
        vendorDetailsWithRequestBuilder(vendorId: vendorId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func vendorDetailsWithRequestBuilder(vendorId:String) -> RequestBuilder<Vendor> {
        let path = "/api/v3/vendors/details/\(vendorId)"
        let URLString = SwaggerClientAPI.basePath + path
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Vendor>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    
    
    open class func newArrivals(userId:String? , completion: @escaping ((_ data: NewArrivals?,_ error: Error?) -> Void)) {
        newArrivalsWithRequestBuilder(userId:userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func newArrivalsWithRequestBuilder(userId:String?) -> RequestBuilder<NewArrivals> {
        let path = "/api/products/newarrivals/1/10?customerID=\(userId ?? "")"
        let URLString = SwaggerClientAPI.basePath + path
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NewArrivals>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    
    open class func corprate(completion: @escaping ((_ data: Banners?,_ error: Error?) -> Void)) {
        corprateWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func corprateWithRequestBuilder() -> RequestBuilder<Banners> {
        let path = "/api/banners/corporate"
        let URLString = SwaggerClientAPI.basePath + path

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Banners>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    
    open class func offers(completion: @escaping ((_ data: NewArrivals?,_ error: Error?) -> Void)) {
        offersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func offersWithRequestBuilder() -> RequestBuilder<NewArrivals> {
        let path = "/api/products/offers?pgno=1&pgsize=10"
        let URLString = SwaggerClientAPI.basePath + path

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NewArrivals>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    
    open class func topPicks(userId:String? = nil, completion: @escaping ((_ data: NewArrivals?,_ error: Error?) -> Void)) {
        topPicksWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func topPicksWithRequestBuilder(userId:String? = nil) -> RequestBuilder<NewArrivals> {
        let path = "/api/products/featured?customerID=\(userId ?? "")"
        let URLString = SwaggerClientAPI.basePath + path

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NewArrivals>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    
    open class func planners( completion: @escaping ((_ data: Planners?,_ error: Error?) -> Void)) {
        plannersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func topPicks(vendorId:String? = nil, completion: @escaping ((_ data: NewArrivals?,_ error: Error?) -> Void)) {
        topPicksWithRequestBuilder(vendorId: vendorId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func topPicksWithRequestBuilder(vendorId:String? = nil) -> RequestBuilder<NewArrivals> {
        let path = "/api/v3/products/vendorTopPicks/\(vendorId ?? "")"
        let URLString = SwaggerClientAPI.basePath + path

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NewArrivals>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    open class func plannersWithRequestBuilder() -> RequestBuilder<Planners> {
        let path = "/api/v3/eventplanner/list"
        let URLString = SwaggerClientAPI.basePath + path

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Planners>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    
    open class func findVendor(text:String ,completion: @escaping ((_ data: Vendors?,_ error: Error?) -> Void)) {
        findVendorWithRequestBuilder(text: text).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func findVendorWithRequestBuilder(text:String) -> RequestBuilder<Vendors> {
        let path = "/api/v3/vendors/search?searchtxt=\(text)"
        let URLString = SwaggerClientAPI.basePath + path

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Vendors>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }

}
