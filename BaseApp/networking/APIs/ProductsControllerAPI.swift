//
// ExploreControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire

open class ProductsControllerAPI {
 
    open class func products(body:ProductsParameters? ,completion: @escaping ((_ data: Products?,_ error: Error?) -> Void)) {
        productsWithRequestBuilder(body:body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func productsWithRequestBuilder(body:ProductsParameters?) -> RequestBuilder<Products> {
        let path = "/api/v3/products"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Products>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    
    open class func vendorProducts(vendorId:String?, text:String? ,completion: @escaping ((_ data: Products?,_ error: Error?) -> Void)) {
        vendorProductsWithRequestBuilder(vendorId: vendorId,text:text).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func vendorProductsWithRequestBuilder(vendorId:String?, text:String?) -> RequestBuilder<Products> {
        let path = "/api/v3/products/vendorProducts?vendorID=\(vendorId ?? "")&name=\(text ?? "")"
        let URLString = SwaggerClientAPI.basePath + path
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Products>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    

    open class func wishList(body:ProductsParameters? ,completion: @escaping ((_ data: Products?,_ error: Error?) -> Void)) {
        wishListWithRequestBuilder(body:body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func wishListWithRequestBuilder(body:ProductsParameters?) -> RequestBuilder<Products> {
        let path = "/api/v3/products/listfavourites/\(body?.customerID ?? "")"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Products>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    
    open class func gifts(subcategories:String,completion: @escaping ((_ data: Products?,_ error: Error?) -> Void)) {
        giftstWithRequestBuilder(subcategories: subcategories).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func giftstWithRequestBuilder(subcategories:String) -> RequestBuilder<Products> {
        let path = "/api/v3/products/giftItems"
        let URLString = SwaggerClientAPI.basePath + path
        let url = URLComponents(string: URLString)
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: [
            "subcategories":subcategories
        ])
        let requestBuilder: RequestBuilder<Products>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    
    open class func giftsSubCategories(completion: @escaping ((_ data: PopUPSCategories?,_ error: Error?) -> Void)) {
        giftsSubCategoriestWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func giftsSubCategoriestWithRequestBuilder() -> RequestBuilder<PopUPSCategories> {
        let path = "/api/v3/category/getGiftsSubCategories"
        let URLString = SwaggerClientAPI.basePath + path
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PopUPSCategories>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: true)
    }
    
    
    open class func addProductToWishList(productId:String ,completion: @escaping ((_ data: AppResponse?,_ error: Error?) -> Void)) {
        addProductToWishListWithRequestBuilder(productId: productId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func addProductToWishListWithRequestBuilder(productId:String) -> RequestBuilder<AppResponse> {
        let path = "/api/customer/addtofavourites/\(productId)"
        let URLString = SwaggerClientAPI.basePath + path
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AppResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    
    open class func removeProductToWishList(productId:String ,completion: @escaping ((_ data: AppResponse?,_ error: Error?) -> Void)) {
        removeProductToWishListWithRequestBuilder(productId: productId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func removeProductToWishListWithRequestBuilder(productId:String) -> RequestBuilder<AppResponse> {
        let path = "/api/customer/removefromfavourites/\(productId)"
        let URLString = SwaggerClientAPI.basePath + path
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AppResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    open class func vendorsSubCategories(vendorId:String? , categoryId:String?,completion: @escaping ((_ data: SubCategories?,_ error: Error?) -> Void)) {
        vendorsSubCategoriesWithRequestBuilder(vendorId: vendorId, categoryId: categoryId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func vendorsSubCategoriesWithRequestBuilder(vendorId:String? , categoryId:String?) -> RequestBuilder<SubCategories> {
        let path = "/api/vendors/subcategories"
        let URLString = SwaggerClientAPI.basePath + path + "/\(vendorId ?? categoryId ?? "")"
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SubCategories>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    
    
    open class func productsSubCategories(vendorId:String? , categoryId:String?,completion: @escaping ((_ data: SubCategories?,_ error: Error?) -> Void)) {
        productsSubCategoriesWithRequestBuilder(vendorId: vendorId, categoryId: categoryId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func productsSubCategoriesWithRequestBuilder(vendorId:String? , categoryId:String?) -> RequestBuilder<SubCategories> {
        let path = "/api/products/subcategories"
        let URLString = SwaggerClientAPI.basePath + path + "/\(vendorId ?? categoryId ?? "")"
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SubCategories>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }
    
    
    open class func productDetails(body:ProductDetailsBody?,completion: @escaping ((_ data: ProductDetails?,_ error: Error?) -> Void)) {
        productDetailsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func productDetailsWithRequestBuilder(body:ProductDetailsBody?) -> RequestBuilder<ProductDetails> {
        let path = "/api/v3/products/featuredcheck"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProductDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
    
    open class func productTimeSlots(eventDate:String? , productID:String?,completion: @escaping ((_ data: DeliveryTimes?,_ error: Error?) -> Void)) {
        productTimeSlotsWithRequestBuilder(eventDate: eventDate, productID: productID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func productTimeSlotsWithRequestBuilder(eventDate:String? , productID:String?) -> RequestBuilder<DeliveryTimes> {
        let path = "/api/products/resources/\(productID ?? "")/\(eventDate ?? "")"
        let URLString = SwaggerClientAPI.basePath + path
        let url = URLComponents(string: URLString)
        let requestBuilder: RequestBuilder<DeliveryTimes>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: nil, isBody: false)
    }

    open class func filterVendors(eventDate:String? , locationID:String, categoryID:String, productType:String?, ocassionID:String ,completion: @escaping ((_ data: Vendors?,_ error: Error?) -> Void)) {
        filterVendorsWithRequestBuilder(eventDate:eventDate , locationID:locationID, categoryID:categoryID, productType:productType , ocassionID:ocassionID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func filterVendorsWithRequestBuilder(eventDate:String? , locationID:String, categoryID:String, productType:String?, ocassionID:String) -> RequestBuilder<Vendors> {
        let path = "/api/vendors"
        let URLString = SwaggerClientAPI.basePath + path
        var urlComponents = URLComponents(string: URLString)
        let queryItems = [
            URLQueryItem(name: "eventDate", value: eventDate),
            URLQueryItem(name: "locationID", value: locationID),
            URLQueryItem(name: "categoryID", value: categoryID),
            URLQueryItem(name: "productType", value: productType),
            URLQueryItem(name: "ocassionID", value: ocassionID)
        ].compactMap { $0 }
        urlComponents?.queryItems = queryItems
        let url = urlComponents?.url?.absoluteString ?? URLString
        let requestBuilder: RequestBuilder<Vendors>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        return requestBuilder.init(method: "GET", URLString: (url), parameters: nil, isBody: false)
    }
    
    
    open class func offers(body:ProductsParameters? ,completion: @escaping ((_ data: Products?,_ error: Error?) -> Void)) {
        offersWithRequestBuilder(body:body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func offersWithRequestBuilder(body:ProductsParameters?) -> RequestBuilder<Products> {
        let path = "/api/v3/products/offers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var urlComponents = URLComponents(string: URLString)
        let queryItems = [
            URLQueryItem(name: "pgno", value: "1"),
            URLQueryItem(name: "pgsize", value: "1000")
        ].compactMap { $0 }
        urlComponents?.queryItems = queryItems
        let url = urlComponents?.url?.absoluteString ?? URLString
        let requestBuilder: RequestBuilder<Products>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url), parameters: nil, isBody: false)
    }
    
    
    
    open class func newarrivals(completion: @escaping ((_ data: Products?,_ error: Error?) -> Void)) {
        newarrivalsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func newarrivalsWithRequestBuilder() -> RequestBuilder<Products> {
        let path = "/api/v3/products/newarrivals/\(1)/\(1000)"
        let URLString = SwaggerClientAPI.basePath + path
        var urlComponents = URLComponents(string: URLString)
        let queryItems = [
            URLQueryItem(name: "customerID", value: User.load()?.details?.id ?? "")
        ].compactMap { $0 }
        urlComponents?.queryItems = queryItems
        let url = urlComponents?.url?.absoluteString ?? URLString
        let requestBuilder: RequestBuilder<Products>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url), parameters: nil, isBody: false)
    }

    open class func featured(completion: @escaping ((_ data: Products?,_ error: Error?) -> Void)) {
        featuredWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    open class func featuredWithRequestBuilder() -> RequestBuilder<Products> {
        let path = "/api/products/featured/\(1)/\(1000)"
        let URLString = SwaggerClientAPI.basePath + path
        var urlComponents = URLComponents(string: URLString)
        let queryItems = [
            URLQueryItem(name: "customerID", value: User.load()?.details?.id ?? "")
        ].compactMap { $0 }
        urlComponents?.queryItems = queryItems
        let url = urlComponents?.url?.absoluteString ?? URLString
        let requestBuilder: RequestBuilder<Products>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url), parameters: nil, isBody: false)
    }

}
